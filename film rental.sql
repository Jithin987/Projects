-- 1. What is the total revenue generated from all rentals in the database? (2 Marks)
use film_rental;
SELECT 
    SUM(amount) AS total_rev_gen
FROM
    payment;

-- 2. How many rentals were made in each month_name? (2 Marks)
SELECT 
    COUNT(*) no_of_rentals, MONTHNAME(rental_date) month_name
FROM
    rental
GROUP BY rental_date;

-- 3. What is the rental rate of the film with the longest title in the database? (2 Marks)
SELECT 
    rental_rate, LENGTH(title) AS title_length, film_id
FROM
    film
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- 4. What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? (2 Marks)
SELECT 
    AVG(rental_rate) avg_rental_rate
FROM
    film
WHERE
    release_year >= YEAR(SUBDATE('2005-05-05 22:04:30', 30));
-- 5. What is the most popular category of films in terms of the number of rentals? (3 Marks)
SELECT 
    category_id, COUNT(rental_id) no_of_rentals
FROM
    film_category fc
        JOIN
    inventory i ON fc.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;


-- 6. Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)

SELECT 
    MAX(length), title
FROM
    film
WHERE
    film_id NOT IN (SELECT DISTINCT
            film_id
        FROM
            rental)
GROUP BY 2;
-- 7. What is the average rental rate for films, broken down by category? (3 Marks)
SELECT 
    category_id, AVG(rental_rate) AS avg_rental_rate
FROM
    film_category fc
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY 1;

-- 8. What is the total revenue generated from rentals for each actor in the database? (3 Marks)
SELECT 
    actor_id,
    CONCAT(first_name, ' ', last_name) actor_name,
    SUM(amount) total_rev_gen
FROM
    payment
        JOIN
    rental USING (rental_id)
        JOIN
    inventory USING (inventory_id)
        JOIN
    film_actor USING (film_id)
        JOIN
    actor USING (actor_id)
GROUP BY 1;

-- 9. Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)
-- no data is present inorder to retrieve data from actress

-- 10. Which customers have rented the same film more than once? (3 Marks)
SELECT 
    customer_id, film_id, title, COUNT(rental_id)
FROM
    rental
        JOIN
    inventory USING (inventory_id)
        JOIN
    film USING (film_id)
GROUP BY 1 , 2
HAVING COUNT(rental_id) > 1
ORDER BY COUNT(rental_id) DESC;
-- 11. How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)
SELECT 
    COUNT(title) AS no_of_films, name AS category
FROM
    film f
        JOIN
    film_category fc ON f.film_id = fc.film_id
        JOIN
    category c ON fc.category_id = c.category_id
WHERE
    rental_rate > (SELECT 
            AVG(rental_rate)
        FROM
            film)
        AND name = 'comedy'
GROUP BY 2;
-- 12. Which films have been rented the most by customers living in each city? (3 Marks)
select city,count(rental_id)as most_rented,title as film_name
from city c join address a on c.city_id = a.city_id
join staff s on a.address_id=s.address_id join rental r on s.staff_id=r.staff_id 
join inventory i on r.inventory_id=i.inventory_id
join film f on i.film_id=f.film_id
group by 1,3
order by 2
desc;
-- 13. What is the total amount spent by customers whose rental payments exceed $200? (3 Marks)
SELECT 
    SUM(amount) AS total_amount, customer_id
FROM
    payment
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            payment
        WHERE
            amount > 200)
GROUP BY customer_id;
-- 14. Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] (2 Marks)
SELECT 
    column_name,
    referenced_table_name,
    referenced_column_name
FROM
    information_schema.key_column_usage
WHERE
    table_name = 'rental'
        AND constraint_name LIKE '%fk%';

-- 15. Create a View for the total revenue generated by each staff member, broken down by store city with the country name. (4 Marks)
create view  staff_revenues AS
(select sum(amount)total_revenue,staff_id,first_name,last_name,city,country
from payment  join staff using (staff_id)
join address  using (address_id)
join city using (city_id)
join country using (country_id)
group by 2,5,6);
-- 16. Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. (4 Marks)
CREATE VIEW rental_info AS
    (SELECT 
        r.rental_id,
        CONCAT(first_name, ' ', last_name) customer_name,
        rental_date visiting_day,
        title,
        DATEDIFF(return_date, rental_date) no_of_rental_days,
        amount,
        (amount / (SELECT 
                SUM(amount)
            FROM
                payment)) * 100 spending_percentage
    FROM
        film f
            JOIN
        inventory i ON f.film_id = i.film_id
            JOIN
        rental r ON i.inventory_id = r.inventory_id
            JOIN
        payment p ON r.rental_id = p.rental_id
            JOIN
        customer c ON p.customer_id = c.customer_id);
-- 17. Display the customers who paid 50% of their total rental costs within one day. (5 Marks)
SELECT 
    c.customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    r.rental_id,
    rental_date,
    SUM(amount) AS total_payment,
    DATEDIFF(MAX(payment_date), MIN(rental_date)) AS days_difference
FROM
    customer c
        JOIN
    rental r ON c.customer_id = r.customer_id
        JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id , r.rental_id
HAVING total_payment >= 0.5 * (SELECT 
        SUM(amount)
    FROM
        payment
    WHERE
        rental_id = r.rental_id)
    AND days_difference = 0;